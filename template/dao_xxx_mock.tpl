// Automatically generated by gendao.
// Source: valencia_media/{{ .Table.Name }}

// ********************
// *** DO NOT EDIT! ***
// ********************

package dao

import (
	"fmt"
	"reflect"
	"sync"
)
{{$TableNamePascal := .Table.NameByPascalcase}}
{{$TableNameCamel := .Table.NameByCamelcase}}
type (
	// Mock{{ $TableNamePascal }}Dao mock {{ $TableNameCamel }} dao
	Mock{{ $TableNamePascal }}Dao struct {
		datasets []Mock{{ $TableNamePascal }}Dataset
		mutex    *sync.Mutex
		baseDao
	}
	// Mock{{ $TableNamePascal }}Dataset mock {{ $TableNameCamel }} dataset
	Mock{{ $TableNamePascal }}Dataset struct {
		res model.{{ $TableNamePascal }}Slice
		err error
	}
)

// NewMock{{ $TableNamePascal }} generate new mock {{ $TableNameCamel }}
func NewMock{{ $TableNamePascal }}() *Mock{{ $TableNamePascal }}Dao {
	mock := Mock{{ $TableNamePascal }}Dao{mutex: new(sync.Mutex)}
	return &mock
}

// GetDataset get the dataset
func (dao *Mock{{ $TableNamePascal }}Dao) GetDataset(index int) *Mock{{ $TableNamePascal }}Dataset {
	if index >= len(dao.datasets) {
		return nil
	}
	return &dao.datasets[index]
}

// ClearDataset clear the dataset
func (dao *Mock{{ $TableNamePascal }}Dao) ClearDataset() {
	dao.datasets = []Mock{{ $TableNamePascal }}Dataset{}
}

// AddDatasetDummy add the dataset from dummy
func (dao *Mock{{ $TableNamePascal }}Dao) AddDatasetDummy(count int) Mock{{ $TableNamePascal }}Dataset {
	datas := make([]model.{{ $TableNamePascal }}, count)
	for i := 0; i < count; i++ {
		datas[i] = model.NewDummy{{ $TableNamePascal }}()
	}
	dataset := Mock{{ $TableNamePascal }}Dataset{res: datas}
	dao.mutex.Lock()
	defer dao.mutex.Unlock()
	dao.datasets = append(dao.datasets, dataset)
	return dataset
}

// AddDataset add the dataset
func (dao *Mock{{ $TableNamePascal }}Dao) AddDataset(data interface{}, err error) {
	dataset := Mock{{ $TableNamePascal }}Dataset{}
	dataset.err = err
	switch d := data.(type) {
	case model.{{ $TableNamePascal }}:
		dataset.res = []model.{{ $TableNamePascal }}{d}
		break
	case *model.{{ $TableNamePascal }}:
		dataset.res = []model.{{ $TableNamePascal }}{*d}
		break
	case []model.{{ $TableNamePascal }}:
		dataset.res = d
	case model.{{ $TableNamePascal }}Slice:
		dataset.res = d
	case nil:
		dataset.res = []model.{{ $TableNamePascal }}{}
		break
	default:
		panic(fmt.Sprintf("unknown type [%s]", reflect.TypeOf(data)))
	}
	dao.mutex.Lock()
	defer dao.mutex.Unlock()
	dao.datasets = append(dao.datasets, dataset)
}

func (dao *Mock{{ $TableNamePascal }}Dao) shiftDataset() *Mock{{ $TableNamePascal }}Dataset {
	dao.mutex.Lock()
	defer dao.mutex.Unlock()
	if len(dao.datasets) == 0 {
		return nil
	}
	res := dao.datasets[0]
	dao.datasets = dao.datasets[1:] // shift
	return &res
}

func (ds *Mock{{ $TableNamePascal }}Dataset) one() (*model.{{ $TableNamePascal }}, error) {
	res, err := ds.many()
	if len(res) > 0 {
		return &res[0], nil
	}
	return nil, err
}

func (ds *Mock{{ $TableNamePascal }}Dataset) error() error {
	_, err := ds.many()
	return err
}

func (ds *Mock{{ $TableNamePascal }}Dataset) many() (model.{{ $TableNamePascal }}Slice, error) {
	if ds == nil {
		return nil, nil
	}
	if ds.err != nil {
		return nil, ds.err
	}
	return ds.res, nil
}

// ------------------------------
// Global Methods for interface
// ------------------------------

{{range .Table.CustomMethods}}
// {{.Name}} get {{ $TableNameCamel }} with {{range $i, $p := .Params}}{{if ne $i 0}} and {{end}}{{.NameByCamelcase}}{{end}}
func (dao *Mock{{ $TableNamePascal }}Dao) {{template "part_method_name.tpl" .}} { {{if .ReturnMany}}
	return dao.shiftDataset().many(){{else}}
	return dao.shiftDataset().one(){{end}}
}
{{end}}
// Insert insert {{ $TableNameCamel }}
func (dao *Mock{{ $TableNamePascal }}Dao) Insert({{ $TableNameCamel }} *model.{{ $TableNamePascal }}) error {
	return dao.shiftDataset().error()
}

// Update update {{ $TableNameCamel }}
func (dao *Mock{{ $TableNamePascal }}Dao) Update({{ $TableNameCamel }} *model.{{ $TableNamePascal }}) error {
	return dao.shiftDataset().error()
}

// DeleteBy{{range .Table.PrimaryKey.Columns}}{{.NameByPascalcase}}{{end}} delete {{ $TableNameCamel }} by {{range .Table.PrimaryKey.Columns}}{{.Name}}{{end}}
func (dao *Mock{{ $TableNamePascal }}Dao) DeleteBy{{range .Table.PrimaryKey.Columns}}{{.NameByPascalcase}}{{end}}({{range .Table.PrimaryKey.Columns}}{{print .NameByCamelcase " " .Type}}{{end}}) error {
	return dao.shiftDataset().error()
}
